/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Document, Operation } from "document-viz-wasm";
export { Document, Operation } from "document-viz-wasm";
export namespace Components {
    interface NamaCaps {
    }
    interface NamaDocumentControls {
        "depth"?: number;
        "depthPerLog"?: 4;
        "secs"?: number;
    }
    interface NamaGraphViz {
        "peer"?: string;
    }
    interface NamaLogViz {
        "peer"?: string;
    }
    interface NamaPeer {
        "author": string;
        "interval": number;
        "latency": number;
        "namaDoc"?: Document;
        "owner": boolean;
    }
    interface NamaPeerControls {
        "frequency": number;
        "latency": number;
        "online": boolean;
        "setFrequency": CallableFunction;
        "setLatency": CallableFunction;
        "setOnline": CallableFunction;
    }
}
export interface NamaCapsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNamaCapsElement;
}
export interface NamaDocumentControlsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNamaDocumentControlsElement;
}
export interface NamaPeerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNamaPeerElement;
}
declare global {
    interface HTMLNamaCapsElementEventMap {
        "namaCaps": { author: string; from?: number; to?: number };
    }
    interface HTMLNamaCapsElement extends Components.NamaCaps, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNamaCapsElementEventMap>(type: K, listener: (this: HTMLNamaCapsElement, ev: NamaCapsCustomEvent<HTMLNamaCapsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNamaCapsElementEventMap>(type: K, listener: (this: HTMLNamaCapsElement, ev: NamaCapsCustomEvent<HTMLNamaCapsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNamaCapsElement: {
        prototype: HTMLNamaCapsElement;
        new (): HTMLNamaCapsElement;
    };
    interface HTMLNamaDocumentControlsElementEventMap {
        "namaPruneConfig": { depth?: number; ms?: number; depthPerLog?: number };
    }
    interface HTMLNamaDocumentControlsElement extends Components.NamaDocumentControls, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNamaDocumentControlsElementEventMap>(type: K, listener: (this: HTMLNamaDocumentControlsElement, ev: NamaDocumentControlsCustomEvent<HTMLNamaDocumentControlsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNamaDocumentControlsElementEventMap>(type: K, listener: (this: HTMLNamaDocumentControlsElement, ev: NamaDocumentControlsCustomEvent<HTMLNamaDocumentControlsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNamaDocumentControlsElement: {
        prototype: HTMLNamaDocumentControlsElement;
        new (): HTMLNamaDocumentControlsElement;
    };
    interface HTMLNamaGraphVizElement extends Components.NamaGraphViz, HTMLStencilElement {
    }
    var HTMLNamaGraphVizElement: {
        prototype: HTMLNamaGraphVizElement;
        new (): HTMLNamaGraphVizElement;
    };
    interface HTMLNamaLogVizElement extends Components.NamaLogViz, HTMLStencilElement {
    }
    var HTMLNamaLogVizElement: {
        prototype: HTMLNamaLogVizElement;
        new (): HTMLNamaLogVizElement;
    };
    interface HTMLNamaPeerElementEventMap {
        "namaSend": { peer: string; latency: number; operations: Operation[] };
        "namaChange": { peer: string; operations: Operation[]; pruned: string[] };
        "namaCaps": { author: string; from?: number; to?: number };
    }
    interface HTMLNamaPeerElement extends Components.NamaPeer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNamaPeerElementEventMap>(type: K, listener: (this: HTMLNamaPeerElement, ev: NamaPeerCustomEvent<HTMLNamaPeerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNamaPeerElementEventMap>(type: K, listener: (this: HTMLNamaPeerElement, ev: NamaPeerCustomEvent<HTMLNamaPeerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNamaPeerElement: {
        prototype: HTMLNamaPeerElement;
        new (): HTMLNamaPeerElement;
    };
    interface HTMLNamaPeerControlsElement extends Components.NamaPeerControls, HTMLStencilElement {
    }
    var HTMLNamaPeerControlsElement: {
        prototype: HTMLNamaPeerControlsElement;
        new (): HTMLNamaPeerControlsElement;
    };
    interface HTMLElementTagNameMap {
        "nama-caps": HTMLNamaCapsElement;
        "nama-document-controls": HTMLNamaDocumentControlsElement;
        "nama-graph-viz": HTMLNamaGraphVizElement;
        "nama-log-viz": HTMLNamaLogVizElement;
        "nama-peer": HTMLNamaPeerElement;
        "nama-peer-controls": HTMLNamaPeerControlsElement;
    }
}
declare namespace LocalJSX {
    interface NamaCaps {
        "onNamaCaps"?: (event: NamaCapsCustomEvent<{ author: string; from?: number; to?: number }>) => void;
    }
    interface NamaDocumentControls {
        "depth"?: number;
        "depthPerLog"?: 4;
        "onNamaPruneConfig"?: (event: NamaDocumentControlsCustomEvent<{ depth?: number; ms?: number; depthPerLog?: number }>) => void;
        "secs"?: number;
    }
    interface NamaGraphViz {
        "peer"?: string;
    }
    interface NamaLogViz {
        "peer"?: string;
    }
    interface NamaPeer {
        "author"?: string;
        "interval"?: number;
        "latency"?: number;
        "namaDoc"?: Document;
        "onNamaCaps"?: (event: NamaPeerCustomEvent<{ author: string; from?: number; to?: number }>) => void;
        "onNamaChange"?: (event: NamaPeerCustomEvent<{ peer: string; operations: Operation[]; pruned: string[] }>) => void;
        "onNamaSend"?: (event: NamaPeerCustomEvent<{ peer: string; latency: number; operations: Operation[] }>) => void;
        "owner"?: boolean;
    }
    interface NamaPeerControls {
        "frequency"?: number;
        "latency"?: number;
        "online"?: boolean;
        "setFrequency"?: CallableFunction;
        "setLatency"?: CallableFunction;
        "setOnline"?: CallableFunction;
    }
    interface IntrinsicElements {
        "nama-caps": NamaCaps;
        "nama-document-controls": NamaDocumentControls;
        "nama-graph-viz": NamaGraphViz;
        "nama-log-viz": NamaLogViz;
        "nama-peer": NamaPeer;
        "nama-peer-controls": NamaPeerControls;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nama-caps": LocalJSX.NamaCaps & JSXBase.HTMLAttributes<HTMLNamaCapsElement>;
            "nama-document-controls": LocalJSX.NamaDocumentControls & JSXBase.HTMLAttributes<HTMLNamaDocumentControlsElement>;
            "nama-graph-viz": LocalJSX.NamaGraphViz & JSXBase.HTMLAttributes<HTMLNamaGraphVizElement>;
            "nama-log-viz": LocalJSX.NamaLogViz & JSXBase.HTMLAttributes<HTMLNamaLogVizElement>;
            "nama-peer": LocalJSX.NamaPeer & JSXBase.HTMLAttributes<HTMLNamaPeerElement>;
            "nama-peer-controls": LocalJSX.NamaPeerControls & JSXBase.HTMLAttributes<HTMLNamaPeerControlsElement>;
        }
    }
}
